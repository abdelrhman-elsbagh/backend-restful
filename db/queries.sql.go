// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, phone_number, otp, otp_expiration_time
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, name, phone_number, otp, otp_expiration_time
`

type CreateUserParams struct {
	Name              string    `json:"name"`
	PhoneNumber       string    `json:"phone_number"`
	Otp               string    `json:"otp"`
	OtpExpirationTime time.Time `json:"otp_expiration_time"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.PhoneNumber,
		arg.Otp,
		arg.OtpExpirationTime,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, name, phone_number, otp, otp_expiration_time FROM users
WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const updateUserOTP = `-- name: UpdateUserOTP :exec
UPDATE users SET
    otp = $2,
    otp_expiration_time = $3
WHERE id = $1
`

type UpdateUserOTPParams struct {
	ID                int32     `json:"id"`
	Otp               string    `json:"otp"`
	OtpExpirationTime time.Time `json:"otp_expiration_time"`
}

func (q *Queries) UpdateUserOTP(ctx context.Context, arg UpdateUserOTPParams) error {
	_, err := q.db.Exec(ctx, updateUserOTP, arg.ID, arg.Otp, arg.OtpExpirationTime)
	return err
}
